// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`global style 1`] = `
"
  === source ===
  
<template>
<h1>hello</h1>
</template>
<script>
import { css } from 'styled-vue'
export default {
  globalStyle: css\`h1 {color: red}\`
}
</script>


  === output ===
  
  <template>
  
<h1>hello</h1>

  </template>

  <script>
  export default {
  globalStyle: undefined // No CSS variables

};
  </script>

  
  <style scoped=\\"undefined\\" lang=\\"undefined\\">
  h1 {color: red}
  </style>
  
  
  "
`;

exports[`global style with scoped style 1`] = `
"
  === source ===
  
<template>
<h1>hello</h1>
</template>
<script>
import { css } from 'styled-vue'
export default {
  style: css\`h1 {color: cyan}\`,
  globalStyle: css\`h1 {color: red}\`
}
</script>


  === output ===
  
  <template>
  
<h1>hello</h1>

  </template>

  <script>
  export default {
  style: undefined // No CSS variables
  ,
  globalStyle: undefined // No CSS variables

};
  </script>

  
  <style scoped=\\"undefined\\" lang=\\"undefined\\">
  h1 {color: red}
  </style>
  

  <style scoped=\\"true\\" lang=\\"css\\">
  h1 {color: cyan}
  </style>
  
  
  "
`;

exports[`global style with scoped style with css variables 1`] = `
"
  === source ===
  
<template>
<h1>hello</h1>
</template>
<script>
import { css } from 'styled-vue'
export default {
  style: css\`h1 {color: cyan}\`,
  globalStyle: css\`h1 {color: red; font-size: \${vm => vm.fontSize};}\`
}
</script>


  === output ===
  
  <template>
  
<h1 :style=\\"$options._getCssVariables(this, $options, undefined)\\">hello</h1>

  </template>

  <script>
  export default {
  style: undefined // No CSS variables
  ,
  globalStyle: function (vm, existing) {
    var gv0 = vm => vm.fontSize;

    return {
      \\"--gv0\\": gv0(vm)
    };
  },
  _getCssVariables: function (vm, options, existing) {
    return [existing, options.globalStyle && options.globalStyle(vm), options.style && options.style(vm)];
  }
};
  </script>

  
  <style scoped=\\"undefined\\" lang=\\"undefined\\">
  h1 {color: red; font-size: var(--gv0);}
  </style>
  

  <style scoped=\\"true\\" lang=\\"css\\">
  h1 {color: cyan}
  </style>
  
  
  "
`;

exports[`no css 1`] = `
"
  === source ===
  
<template>
  <h1 style=\\"foo\\" :style=\\"{}\\">hello</h1>
</template>
<script>
export default {}
</script>


  === output ===
  
  <template>
  
<h1 style=\\"foo\\" :style=\\"{}\\">hello</h1>

  </template>

  <script>
  export default {};
  </script>

  
  
  "
`;

exports[`no vars 1`] = `
"
  === source ===
  
<template>
  <h1 style=\\"foo\\" :style=\\"{}\\">hello</h1>
</template>
<script>
import { css } from 'styled-vue'
export default {
  style: css\`h1 {color: red}\`
}
</script>


  === output ===
  
  <template>
  
<h1 style=\\"foo\\" :style=\\"{}\\">hello</h1>

  </template>

  <script>
  export default {
  style: undefined // No CSS variables

};
  </script>

  
  <style scoped=\\"true\\" lang=\\"css\\">
  h1 {color: red}
  </style>
  
  
  "
`;

exports[`simple 1`] = `
"
  === source ===
  
  <template>
    <h1 style=\\"foo\\" :style=\\"{}\\">hello</h1>
  </template>
  <script>
  import { css } from 'styled-vue'
  export default {
    style: css\`
    h1 {
      color: \${vm => vm.color};
      width: \${200 + 1}px;
    }
    \`
  }
  </script>
  

  === output ===
  
  <template>
  
<h1 style=\\"foo\\" :style=\\"$options._getCssVariables(this, $options, {})\\">hello</h1>

  </template>

  <script>
  export default {
  style: function (vm, existing) {
    var v0 = vm => vm.color;

    var v1 = 200 + 1;
    return {
      \\"--v0\\": v0(vm),
      \\"--v1\\": v1 + \\"px\\"
    };
  },
  _getCssVariables: function (vm, options, existing) {
    return [existing, options.globalStyle && options.globalStyle(vm), options.style && options.style(vm)];
  }
};
  </script>

  
  <style scoped=\\"true\\" lang=\\"css\\">
  
  h1 {
    color: var(--v0);
    width: var(--v1);
  }
  
  </style>
  
  
  "
`;
